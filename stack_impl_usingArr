#include <stdio.h>
#include <stdlib.h>

typedef struct _Stack{
    int *arr;
    int capacity;
    int top;
}stack;

stack *createStack (int capacity){
    stack *s = NULL;
    s = (stack *)malloc (sizeof(stack));
    
    s->capacity = capacity;
    s->top = -1;
    s->arr = (int *)malloc(capacity *sizeof(int));
    
    return s;
}

int isFull(stack *s){
    return (s->top == (s->capacity -1));
}

int isEmpty(stack *s){
    return s->top == -1;    
}

void push(stack *s, int data){
    
    if (isFull(s)){
        printf("Stack is full ..\n");
        return;
    } 
    
    s->arr[++s->top] = data;
}

int pop(stack *s){
    if(isEmpty(s)){
        printf("Stack is empty ..\n");
        return -1; 
    }
    
    return s->arr[s->top--];
}

int getTop(stack *s){
    if(isEmpty(s)){
        printf("Stack is empty ..\n");
        return -1; 
    }
    
    return s->arr[s->top];
}

int getMin(stack *s){
    int index = s->top;
    int data = s->arr[index];
    
    while (index >= 0){
        if (data > s->arr[index]){
            data = s->arr[index];
        }
        index --;
    }
    return data;
}

int main()
{
    stack *s = createStack(5);
    
    push(s, 3);
    push(s, 5);
    push(s, 1);
    push(s, 4);
    push(s, 2);

    int top = -1;
    int data =-1;
    
    top = getTop(s);
    printf("Stack top data: %d\n", top);
    
    int minData = getMin(s);
    printf("Stack min data: %d\n", minData);
    
    data = pop(s);
    printf("Stack popped data: %d\n", data);
    
    data = pop(s);
    printf("Stack popped data: %d\n", data);
    
    data = pop(s);
    printf("Stack popped data: %d\n", data);
    
    data = pop(s);
    printf("Stack popped data: %d\n", data);
    
    data = pop(s);
    printf("Stack popped data: %d\n", data);
    
    top = getTop(s);
    if (top < 0){
        return 0;
    }
    printf("Stack top data: %d\n", top);
    
    data = pop(s);
    if (data < 0){
        return 0;
    }
    printf("Stack popped data: %d\n", data);
    
    return 0;
}
